#include <RH_ASK.h>
#include <SPI.h> // Not actually used but needed to compile
#include "dht.h"
#define dht_apin A1
//#define rfTransmitPin 50

RH_ASK driver(2000, 50, 50, 10);

dht DHT;

const int led = 10;

int lightSensor = A0;
int lightSensorValue = 0;
int fireSensor = A2;
int fireSensorValue = 0;
int timer = 0;
float tempc = 0;
float tempf = 0;
float humi = 0;
const int flameMin = 0;
const int flameMax = 1024;
String sendStr = "";

void setup()
{
    Serial.begin(9600);   // Debugging only
    delay(1500);
    pinMode(led,OUTPUT);
    if (!driver.init())
         Serial.println("init failed");
    Serial.println("Successful Initiation");
}

void loop() {
  // put your main code here, to run repeatedly:
  
  lightSensorValue = analogRead(lightSensor);
  fireSensorValue = analogRead(fireSensor);
  int range = map(fireSensorValue, flameMin, flameMax, 0, 3);

  if (timer == 2000)
  {
    DHT.read11(dht_apin);
    tempc = DHT.temperature;
    humi = DHT.humidity;  
    tempf = (tempc * 9.0 / 5.0) + 32.0;
    if (lightSensorValue >= 150)
    {
      sendStr += "1\t";
    }
    else
    {
      sendStr += "0\t";
    }
    Serial.print("Luminosity:\t");
    sendStr += "Luminosity:\t";
    Serial.print(lightSensorValue);
    sendStr += String(lightSensorValue);
    Serial.print("\t|\tTemperature:\tC:\t");
    sendStr += "\t|\tTemperature:\tC:\t";
    Serial.print(tempc);
    sendStr += String(tempc);
    Serial.print("\tF:\t");
    sendStr += "\tF:\t";
    Serial.print(tempf);
    sendStr += String(tempf);
    Serial.print("\t|\tHumidity:\t");
    sendStr += "\t|\tHumidity:\t";
    Serial.print(DHT.humidity);
    sendStr += String(DHT.humidity);
    Serial.println("%");
    sendStr += "%";
    timer = 0;
  }

  
  if (lightSensorValue >= 150)
  {
    digitalWrite(led,HIGH);
  }
  if (lightSensorValue < 150)
  {
    digitalWrite(led,LOW);
  }


  switch (range) {
    case 0:
      Serial.println("ERROR: FIRE WITHIN CRITICAL SAFE DISTANCE OF ARDUINO!");
      sendStr += "ERROR: FIRE WITHIN CRITICAL SAFE DISTANCE OF ARDUINO!";
      delay(100);
      break;
    case 1:
      Serial.println("ERROR: FIRE NEAR ARDUINO!");
      sendStr += "ERROR: FIRE NEAR ARDUINO!";
      delay(100);
      break;
    case 2:
      break;
  }

  static char *msg = sendStr.c_str();

  driver.send((uint8_t *)msg, strlen(msg));
  driver.waitPacketSent();
  sendStr = "";
  
  timer = timer + 10;
  delay(10);
}